@startuml
GeoLocation ..|> "Geo_Location"
NodeData ..|> "Node_Data"
EdgeData ..|> "Edge_Data"
DirectWeightedGraph ..|> "Direct_Weighted_Graph"
DirectWeightedGraphAlgorithms ..|> "Direct_Weighted_Graph_Algorithms"

interface GeoLocation {
double x()
double y()
double z()
double distance(GeoLocation g)
}

interface NodeData{
int getKey()
GeoLocation getLocation()
setLocation(GeoLocation p)
double getWeight()
setWeight(double w)
String getInfo()
setInfo(String s)
int getTag()
setTag(int t)
}

interface EdgeData{
int getSrc()
int getDest()
double getWeight()
String getInfo()
setInfo(String s)
int getTag()
setTag(int t)
}

interface DirectWeightedGraph{
}NodeData getNode(int key)
EdgeData getEdge(int src, int dest)
addNode(NodeData n)
connect(int src, int dest, double w)
Iterator<NodeData> nodeIter()
Iterator<EdgeData> edgeIter()
Iterator<EdgeData> edgeIter(int node_id)
NodeData removeNode(int key)
EdgeData removeEdge(int src, int dest)
int nodeSize()
int edgeSize()
int getMC()
}

interface DirectWeightedGraphAlgorithms{
init(DirectedWeightedGraph g)
DirectedWeightedGraph getGraph()
DirectedWeightedGraph copy()
boolean isConnected()
double shortestPathDist(int src, int dest)
List<NodeData> shortestPath(int src, int dest)
NodeData center()
List<NodeData> tsp(List<NodeData> cities)
boolean save(String file)
boolean load(String file)

}


Class "Node_Data"{
int key
int tag
GeoLocation location
double weight
String info
ArrayList<Node_Data> list_of_neighbors
Node_Data(int key, GeoLocation location, double weight)
Node_Data(int key, GeoLocation location, double weight, String info, int tag)
ArrayList<Node_Data> getNeighborsList()
setLocation(GeoLocation p)
updateNeighbors(Node_Data neighbor)
int getKey()
double getWeight()
GeoLocation getLocation()
setLocation(GeoLocation p)
getWeight()
setWeight(double w)
String getInfo()
setInfo(String s)
int getTag()
setTag(int t)
}


Class "Edge_Data"{
int src
int dest
int tag
double weight
String info
Edge_Data(int src, int dest, double weight)
Edge_Data(int src, int dest, double weight, String info, int tag)
int getSrc()
int getDest()
double getWeight()
String getInfo()
setInfo(String s)
int getTag()
setTag(int t)
}

Class "Geo_Location"{
double x
double y
double z
Geo_Location()
Geo_Location(double x, double y, double z)
Geo_Location(Geo_Location other)
double x()
double y()
double z()
double distance(GeoLocation g)
}


Class "Direct_Weighted_Graph"{
HashMap<Integer, NodeData> NodeMap
int MC
HashMap<String, EdgeData> EdgeMap
Directed_Weighted_Graph()
HashMap<Integer, NodeData> getNodeMap()
HashMap<String, EdgeData> getEdgeMap()
NodeData getNode(int key)
EdgeData getEdge(int src, int dest)
addNode(NodeData n)
connect(int src, int dest, double w)
Iterator<NodeData> nodeIter()
Iterator<EdgeData> edgeIter()
Iterator<EdgeData> edgeIter(int node_id)
NodeData removeNode(int key)
EdgeData removeEdge(int src, int dest)
int nodeSize()
int edgeSize()
int getMC()
}


Class "Direct_Weighted_Graph_Algorithms"{
Directed_Weighted_Graph graph
double[][] distAllNodes
Node_Data[] prev
double[] dist
Directed_Weighted_Graph_Algorithms()
Directed_Weighted_Graph_Algorithms(DirectedWeightedGraph g)
init(DirectedWeightedGraph g)
DirectedWeightedGraph getGraph()
DirectedWeightedGraph copy()
boolean isConnected()
DijkstraAlgo(double[][] weights, int src)
minimumDist(double dist[], Boolean sptSet[])
double shortestPathDist(int src, int dest)
List<NodeData> shortestPath(int src, int dest)
FWA()
NodeData center()
List<NodeData> tsp(List<NodeData> cities)
int minWeightIndex(List<NodeData> tmpCities, NodeData currNode)
boolean save(String file)
boolean load(String file)
}
Class "Ex2"{
DirectedWeightedGraph getGrapg(String json_file)
 DirectedWeightedGraphAlgorithms getGrapgAlgo(String json_file)
runGUI(String json_file)

}

@enduml
